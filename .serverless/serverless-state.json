{
  "service": {
    "service": "dailey-quotes",
    "serviceObject": {
      "name": "dailey-quotes"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs20.x",
      "region": "eu-north-1",
      "profile": "emuna",
      "environment": {
        "MONGODB_URI": "mongodb+srv://avivyona51_db_user:1234@daileyquotes.wxgfos7.mongodb.net/DaileyQuotes?retryWrites=true&w=majority",
        "API_PASSWORD": "AvivTheKing",
        "ADMIN_PASS": "AvivTheKing",
        "REGION": "eu-north-1",
        "BUCKET": "emunabuck",
        "PORT": "3000"
      },
      "iam": {
        "role": "arn:aws:iam::551566338738:role/emuna-lambda-rule"
      },
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "ApiLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/dailey-quotes-dev-api"
            }
          },
          "ApiLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/dailey-quotes/dev/1760622726237-2025-10-16T13:52:06.237Z/dailey-quotes.zip"
              },
              "Handler": "dist/lambda.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "dailey-quotes-dev-api",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "MONGODB_URI": "mongodb+srv://avivyona51_db_user:1234@daileyquotes.wxgfos7.mongodb.net/DaileyQuotes?retryWrites=true&w=majority",
                  "API_PASSWORD": "AvivTheKing",
                  "ADMIN_PASS": "AvivTheKing",
                  "REGION": "eu-north-1",
                  "BUCKET": "emunabuck",
                  "PORT": "3000"
                }
              },
              "Role": "arn:aws:iam::551566338738:role/emuna-lambda-rule"
            },
            "DependsOn": [
              "ApiLogGroup"
            ]
          },
          "ApiLambdaVersionuEELYhaNUj7nIjox5d8e0DhZ9WGEMfrugjErhUJ4iNs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ApiLambdaFunction"
              },
              "CodeSha256": "/PszvIFXIONBMdZn8lvgtRLdgRRHSrwYcYBaviWyieA="
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-dailey-quotes",
              "ProtocolType": "HTTP"
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "ApiLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ApiLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationApi": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetQuote": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /quote",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationApi"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationApi"
          },
          "HttpApiRouteGetBackground": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /background",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationApi"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationApi"
          },
          "HttpApiRoutePostAdminQuote": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /admin/quote",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationApi"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationApi"
          },
          "HttpApiRoutePutAdminQuoteIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /admin/quote/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationApi"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationApi"
          },
          "HttpApiRouteDeleteAdminQuoteIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /admin/quote/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationApi"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationApi"
          },
          "HttpApiRouteGetQuotes": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /quotes",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationApi"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationApi"
          },
          "HttpApiRoutePostQuotes": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /quotes",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationApi"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationApi"
          },
          "HttpApiRouteGetQuotesAuthorIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /quotes/author/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationApi"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationApi"
          },
          "HttpApiRouteGetQuotesIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /quotes/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationApi"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationApi"
          },
          "HttpApiRoutePatchQuotesIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PATCH /quotes/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationApi"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationApi"
          },
          "HttpApiRouteDeleteQuotesIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /quotes/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationApi"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationApi"
          },
          "HttpApiRouteGetBackgrounds": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /backgrounds",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationApi"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationApi"
          },
          "HttpApiRoutePostBackgrounds": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /backgrounds",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationApi"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationApi"
          },
          "HttpApiRouteGetBackgroundsFilenameVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /backgrounds/{fileName}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationApi"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationApi"
          },
          "HttpApiRouteDeleteBackgroundsFilenameVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /backgrounds/{fileName}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationApi"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationApi"
          },
          "HttpApiRouteGetAuthors": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /authors",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationApi"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationApi"
          },
          "HttpApiRoutePostAuthors": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /authors",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationApi"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationApi"
          },
          "HttpApiRouteGetAuthorsIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /authors/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationApi"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationApi"
          },
          "HttpApiRoutePatchAuthorsIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PATCH /authors/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationApi"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationApi"
          },
          "HttpApiRouteDeleteAuthorsIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /authors/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationApi"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationApi"
          },
          "HttpApiRoutePostAdminVerify": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /admin/verify",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationApi"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationApi"
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-dailey-quotes-dev-ServerlessDeploymentBucketName"
            }
          },
          "ApiLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ApiLambdaVersionuEELYhaNUj7nIjox5d8e0DhZ9WGEMfrugjErhUJ4iNs"
            },
            "Export": {
              "Name": "sls-dailey-quotes-dev-ApiLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-dailey-quotes-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-dailey-quotes-dev-HttpApiUrl"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "pluginsData": {},
    "functions": {
      "api": {
        "handler": "dist/lambda.handler",
        "events": [
          {
            "httpApi": {
              "path": "/quote",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/quote"
          },
          {
            "httpApi": {
              "path": "/background",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/background"
          },
          {
            "httpApi": {
              "path": "/admin/quote",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/admin/quote"
          },
          {
            "httpApi": {
              "path": "/admin/quote/{id}",
              "method": "put"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/admin/quote/{id}"
          },
          {
            "httpApi": {
              "path": "/admin/quote/{id}",
              "method": "delete"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/admin/quote/{id}"
          },
          {
            "httpApi": {
              "path": "/quotes",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/quotes"
          },
          {
            "httpApi": {
              "path": "/quotes",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/quotes"
          },
          {
            "httpApi": {
              "path": "/quotes/author/{id}",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/quotes/author/{id}"
          },
          {
            "httpApi": {
              "path": "/quotes/{id}",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/quotes/{id}"
          },
          {
            "httpApi": {
              "path": "/quotes/{id}",
              "method": "patch"
            },
            "resolvedMethod": "PATCH",
            "resolvedPath": "/quotes/{id}"
          },
          {
            "httpApi": {
              "path": "/quotes/{id}",
              "method": "delete"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/quotes/{id}"
          },
          {
            "httpApi": {
              "path": "/backgrounds",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/backgrounds"
          },
          {
            "httpApi": {
              "path": "/backgrounds",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/backgrounds"
          },
          {
            "httpApi": {
              "path": "/backgrounds/{fileName}",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/backgrounds/{fileName}"
          },
          {
            "httpApi": {
              "path": "/backgrounds/{fileName}",
              "method": "delete"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/backgrounds/{fileName}"
          },
          {
            "httpApi": {
              "path": "/authors",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/authors"
          },
          {
            "httpApi": {
              "path": "/authors",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/authors"
          },
          {
            "httpApi": {
              "path": "/authors/{id}",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/authors/{id}"
          },
          {
            "httpApi": {
              "path": "/authors/{id}",
              "method": "patch"
            },
            "resolvedMethod": "PATCH",
            "resolvedPath": "/authors/{id}"
          },
          {
            "httpApi": {
              "path": "/authors/{id}",
              "method": "delete"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/authors/{id}"
          },
          {
            "httpApi": {
              "path": "/admin/verify",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/admin/verify"
          }
        ],
        "name": "dailey-quotes-dev-api",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "ApiLambdaVersionuEELYhaNUj7nIjox5d8e0DhZ9WGEMfrugjErhUJ4iNs"
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "dailey-quotes",
      "frameworkVersion": "^3.0.0",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "package": {
        "patterns": [
          "!src/**",
          "dist/**",
          "node_modules/**",
          "package.json",
          "package-lock.json"
        ],
        "artifactsS3KeyDirname": "serverless/dailey-quotes/dev/code-artifacts",
        "artifact": "/Users/aviv/Documents/DaileyQuotes/.serverless/dailey-quotes.zip",
        "artifactDirectoryName": "serverless/dailey-quotes/dev/1760622726237-2025-10-16T13:52:06.237Z"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "/Users/aviv/Documents/DaileyQuotes/.serverless/dailey-quotes.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/dailey-quotes/dev/1760622726237-2025-10-16T13:52:06.237Z",
    "artifact": "dailey-quotes.zip"
  }
}